#include <stdio.h>
#include <stdlib.h>

typedef struct Lklist {
    int info;
    struct Lklist *next;
} node;

void insertAtBeginning(node **h, int value);
void insertAtEnd(node **h, int value);
void traverse(node *h);
void deleteAtBeginning(node **h);
void deleteAtEnd(node **h);
void deleteAfter(node *h, int value);
void deleteAtPosition(node **h, int position);
int search(node *h, int value);


int main() {
    node *h = NULL;
    int choice, value, position;

    while (1) {
        printf("\n1 - Insert at beginning\n");
        printf("2 - Insert at end\n");
        printf("3 - Traverse\n");
        printf("4 - Search\n");
        printf("5 - Delete at beginning\n");
        printf("6 - Delete at end\n");
        printf("7 - Delete after a value\n");
        printf("8 - Delete at a specific position\n");
        printf("9 - Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter the value: ");
                scanf("%d", &value);
                insertAtBeginning(&h, value);
                break;

            case 2:
                printf("Enter the value: ");
                scanf("%d", &value);
                insertAtEnd(&h, value);
                break;

            case 3:
                traverse(h);
                break;

            case 4:
                printf("Enter the value to search: ");
                scanf("%d", &value);
                int pos = search(h, value);
                if (pos != -1) {
                    printf("Element found at position %d!\n", pos);
                } else {
                    printf("Element not found!\n");
                }
                break;

            case 5:
                deleteAtBeginning(&h);
                break;

            case 6:
                deleteAtEnd(&h);
                break;

            case 7:
                printf("Enter the value after which you want to delete: ");
                scanf("%d", &value);
                deleteAfter(h, value);
                break;

            case 8:
                printf("Enter the position to delete: ");
                scanf("%d", &position);
                deleteAtPosition(&h, position);
                break;

           default:
                printf("Please enter a valid option.\n");
        }
    }

    return 0;
}

void insertAtBeginning(node **h, int value) {
    node *newNode = (node *)malloc(sizeof(node));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        return;
    }
    newNode->info = value;
    newNode->next = *h;
    *h = newNode;
}

void insertAtEnd(node **h, int value) {
    node *newNode = (node *)malloc(sizeof(node));
    if (newNode == NULL) {
        printf("Memory allocation failed!\n");
        return;
    }
    newNode->info = value;
    newNode->next = NULL;

    if (*h == NULL) {
        *h = newNode;
        return;
    }

    node *temp = *h;
    while (temp->next != NULL) {
        temp = temp->next;
    }
    temp->next = newNode;
}

void traverse(node *h) {
    if (h == NULL) {
        printf("List is empty.\n");
        return;
    }
    printf("Linked list: ");
    node *temp = h;
    while (temp != NULL) {
        printf("%d -> ", temp->info);
        temp = temp->next;
    }
    printf("NULL\n");
}

int search(node *h, int value) {
    int pos = 1;
    node *temp = h;
    while (temp != NULL) {
        if (temp->info == value) {
            return pos;
        }
        temp = temp->next;
        pos++;
    }
    return -1;
}

void deleteAtBeginning(node **h) {
    if (*h == NULL) {
        printf("List is empty.\n");
        return;
    }
    node *t = *h;
    *h = (*h)->next;
    free(t);
    printf("Deleted from the beginning.\n");
}

void deleteAtEnd(node **h) {
    if (*h == NULL) {
        printf("List is empty.\n");
        return;
    }
    if ((*h)->next == NULL) {
        free(*h);
        *h = NULL;
        printf("Deleted last element.\n");
        return;
    }
    node *t = *h;
    while (t->next->next != NULL) {
        t = t->next;
    }
    free(t->next);
    t->next = NULL;
    printf("Deleted from the end.\n");
}

//  delete node after 
void deleteAfter(node *h, int value) {
    node *temp = h;
    while (temp != NULL && temp->info != value) {
        temp = temp->next;
    }

    if (temp == NULL || temp->next == NULL) {
        printf("Deletion not possible.\n");
        return;
    }

    node *delNode = temp->next;
    temp->next = delNode->next;
    free(delNode);
    printf("Node deleted after value %d.\n", value);
}

//  delete node at a specific position
void deleteAtPosition(node **h, int position) {
    if (*h == NULL) {
        printf("List is empty.\n");
        return;
    }

    if (position == 1) {
        deleteAtBeginning(h);
        return;
    }

    node *temp = *h;
    for (int i = 1; temp != NULL && i < position - 1; i++) {
        temp = temp->next;
    }

    if (temp == NULL || temp->next == NULL) {
        printf("Invalid position.\n");
        return;
    }

    node *delNode = temp->next;
    temp->next = delNode->next;
    free(delNode);
    printf("Deleted node at position %d.\n", position);
}


